#include <raylib.h>
#include <array>
#include <string>
#include <cstring>
#include <cmath>
#include <iostream>

using namespace std;

float playerX = 100;
float playerY = 100;
float vX = 0;
float vY = 0;
float gravity = 1;
int jump = 0;
float grounded = 0;
int deathCounter = 0;

int map1[384] = 
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
};
int map2[384] = 
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
};
int map3[384] = 
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,
1,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,1,1,1,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
};
int map4[384] = 
{0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,1,0,
0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,1,0,1,0,
0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,1,0,1,0,
0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,1,0,
0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,1,1,0,
0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,0,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
};
int map5[384] = 
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,
};
int* map = map1;  // Start with map1  
void killPlayer(){
    playerX = 100;
    playerY = 600;
    deathCounter+=1;
}
bool checkCollision(){
    for (int i = 0; i < 384; i++){
        int x = (i%24)*50;
        int y = (i/24)*50;
        if (map[i] != 0){
            if((playerX+30 > x && playerX < x+50) && (playerY+50 > y && playerY <y+50)){
                if(map[i] == 2){
                    killPlayer();
                }
                return true;
            }
        }
    }
    return false;
}  
string mapSave(){
    string output = "{";
    for(int i = 0; i < 384; i++){
        output += (to_string(map[i]) + ",") ;
        if((i+1)%24==0){output += "\n";}
    }
    output += "}";
    return output;
}
void editMap(){
    int x = floor(GetMouseX()/50);
    int y = floor(GetMouseY()/50);
    if(IsMouseButtonPressed(MOUSE_BUTTON_LEFT)){
        map[(y*24)+x] += 1;
        if(map[(y*24)+x] > 2){
            map[(y*24)+x] = 0;
        }
    }
    if(IsMouseButtonPressed(MOUSE_BUTTON_RIGHT)){
        map[(y*24)+x] = 0;
    }
    if(IsKeyPressed(KEY_SPACE)){
        cout << mapSave() << endl;
    }
}
void Movement(){
    if(IsKeyPressed(KEY_UP) || IsKeyPressed(KEY_W)){
        if (jump > 0){
            vY = -20;
            jump -= 1;
        }
    }
    playerY+=2;
    if(checkCollision()){
        grounded = 1;
        jump = 2;
    }
    else if(grounded > 0){
        grounded -= .1;
    }
    if(jump == 2 && grounded <= 0){
        jump = 1;
    }
    playerY-=2;
    //if(IsKeyDown(KEY_DOWN)){}
    if(IsKeyDown(KEY_LEFT) || IsKeyDown(KEY_A)){vX -=1;}
    if(IsKeyDown(KEY_RIGHT) || IsKeyDown(KEY_D)){vX +=1;}
    vX = vX*.88;
    vY += gravity;
    playerX += vX;
    for (int i = 0; i < 6; i++){
        if(checkCollision()){playerY -= 1;}
    }
    if(checkCollision()){
        playerY += 6;
        playerX -= vX;
        vX = 0;
    }
    playerY += vY;
    if(checkCollision()){
        playerY -= vY;
        vY = 0;
    }
}

void levelOrder(){
    if (playerY > 800){
        killPlayer();
    }
    if(playerX > 1200){
        if(map == map1){
            map = map2;
        }
        else if (map == map2){
            map = map3;
        }
        else if (map == map3){
            map = map4;
        }
        else if (map == map4){
            map = map5;
        }
        playerX = 100;
        playerY = 600;
    }
}

void drawMap(){
    for (int i = 0; i < 384; i++){
        if (map[i] == 1){
            DrawRectangle((i%24)*50, (i/24)*50, 50, 50, BLACK);
        }
        if (map[i] == 2){
            DrawRectangle((i%24)*50, (i/24)*50, 50, 50, RED);
        }
    }
}

int main(void){
    InitWindow(1200, 800, "p5.js Window");

    SetTargetFPS(60);
    
    Image buschy = LoadImage("assets/Buschy.png");
    ImageResize(&buschy, 30, 50);
    Texture2D Buschy = LoadTextureFromImage(buschy);
    UnloadImage(buschy);
    
    while (!WindowShouldClose()){
        BeginDrawing();
            ClearBackground(RAYWHITE);
            DrawText(TextFormat("%04i", deathCounter), GetMouseX(), GetMouseY(), 20, BLACK);
            DrawTexture(Buschy, playerX, playerY, WHITE);
            drawMap();
            DrawText(TextFormat("%01i", jump), GetMouseX()+75, GetMouseY(), 20, BLACK);
        EndDrawing();
        Movement();
        editMap();
        levelOrder();
    }
    UnloadTexture(Buschy);
    CloseWindow();
    return 0;
}